import urllib
import os
import time
print "Installing..."
urllib.urlretrieve ("https://bootstrap.pypa.io/get-pip.py", "run.py")
os.startfile("run.py")

urllib.urlretrieve ("https://github.com/SPMNJ/Currentbot/raw/master/anti-sad_song.ogg", "song.ogg")
def install_and_import(package):
    import importlib
    try:
        importlib.import_module(package)
    except ImportError:
        import pip
        pip.main(['install', package])
    finally:
        globals()[package] = importlib.import_module(package)


install_and_import('pygame')
text = ['import time', 'import os', 'import webbrowser', 'import sys', 'import msvcrt', 'import random', 'current_block = -1', 'import pygame', 'code = [\'set WshShell=createobject("wscript.shell")\', \'WScript.Sleep 1000\', \'WshShell.run "C:\\\\Windows\\\\System32\\\\SndVol.exe"\', \'WshShell.AppActivate "Volume Control"\', \'WScript.Sleep 1000\', \'WshShell.SendKeys("{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}{UP}")\', \'WScript.Sleep 1000\', \'WshShell.sendkeys "%{f4}"\']', 'volume = open("run.vbs","w+")', 'for i in range(len(code)):', '    volume.write(code[i]+"\\n")', 'volume.close()', 'os.startfile("run.vbs")', 'time.sleep(3)', 'os.remove("run.vbs")', 'class Player(object):', '  def __init__(self):', '    self.name = raw_input("Enter your name: ")', '    self.lives = 5', '  def loselife(self):', '    self.lives -= 1', '    print "You now have %d live(s) remaning)" % self.lives', '    if self.lives == 0:', '      time.sleep(5)', '      print "RIP %s" % self.name', '      time.sleep(4)', '      print "Restarting the level with 5 extra tries!"', '      time.sleep(4)', '      self.lives = 5', 'class Homeroom(object):', '  def btext(self):', "    self.text = ['You walk to the front of the school.', 'You then walk to your homeroom.', 'Its going to be a hard day You though.', 'You then walk in homeroom.']", '    for i in range(len(self.text)):', '      print self.text[i]', '      time.sleep(3)', '  def ftext(self):', "    self.text = ['You then here the music from RVTV blaring.', 'While you watch the TV you remeber how hard today is.', 'You hope you will be able to get though the day']", '    for i in range(len(self.text)):', '      print self.text[i]', '      time.sleep(3)', 'class Block1(object):', '  def __init__(self):', '    self.block = 1', '    self.type = "Gemometry"', '    self.teacher = "Mr. Pinto"', '    self.room = "C103"', '  def btext(self):', '    self.text = [\'You walk into your first block class...\', "You\'re very excited to learn more geometry, so you sit in the front of the room.", \'You pull your big organized math textbook out of your bag. \', \'You remember that today you have a formative assessment. \', "You\'re handed a sheet of paper titled \'Unit 4\'" \'You take out a pencil\']', '    for i in range(len(self.text)):', '      print self.text[i]', '      time.sleep(3)', '  def challenge(self):', '    print "If a quadrilateral\'s diagonals bisect each other,  is this quadrilateral a parallelogram? Y or N"', '    self.answer = raw_input("> ")', '    self.wrong = 0', '    if not(self.answer == "Y" or self.answer == "y"):', '      self.wrong += 1', '    print "One side of a right triangle equals 67 degrees, another side 4x + 9, what is the value of \'x\'"', '    self.answer = raw_input("> ")', '    if self.answer != "3.5":', '      self.wrong += 1', '    print "Triangle ABC is an Isosceles Triangle. Angle \'A\' measure is 88 degrees and AB = CA. What are the measurement of angle \'C\'"', '    self.answer = raw_input("> ")', '    if self.answer != "46":', '      self.wrong += 1', '    print "7+3x = 70, what is the value of \'x\'?"', '    self.answer = raw_input("> ")', '    if self.answer != "21":', '      self.wrong += 1', '    print "Angle \'a\' is the alternate interior angle of angle \'d\', angle \'d\' equals 70 degrees, what is the value of angle \'a\'?"', '    self.answer = raw_input("> ")', '    if self.answer != "70":', '      self.wrong += 1', '    if self.wrong > 3:', '      print "You feel that you answer some of the problems wrong so you redo it."', '      return False', '    return True', '  def ftext(self):', '    time.sleep(2)', '    print "\\nYou put your test on the back counter and not long after, the bell rings. So, you head to your next class."', '    time.sleep(2)', 'class Block2(object):', '  def __init__(self):', '    self.block = 2', '    self.type = "Italian"', '    self.teacher = "Mr. Ritter"', '    self.room = "B225"', '  def btext(self):', '    self.text = [\'You sit down in your Italian class\', \'"Okay you kids," Mr. Ritter says\', "Today you\'re taking your first test. You have to translate these simple phrases.", \'He hands you the papers and you get to work...\']', '    for i in range(len(self.text)):', '      print self.text[i]', '      time.sleep(3)', '  def challenge(self):', '    print "Posso collegarmi con internet"', '    self.answer = raw_input("> ")', '    self.wrong = 0', '    if self.answer != "I can connect with internet":', '      self.wrong += 1', '    print "Parla inglese"', '    self.answer = raw_input("> ")', '    if self.answer != "Speak English":', '      self.wrong += 1', '    print "Ripeti, per favore"', '    self.answer = raw_input("> ")', '    if self.answer != "Please repeat":', '      self.wrong += 1', '    print "Si"', '    self.answer = raw_input("> ")', '    if self.answer != "Yes":', '      self.wrong += 1', '    print "Caio"', '    self.answer = raw_input("> ")', '    if self.answer != "Caio":', '      self.wrong += 1', '    if self.wrong > 4:', '      print "You feel that you answer some of the problems wrong so you redo it."', '      return False', '    return True', '  def ftext(self):', "    self.text = ['After the Test you turn it over.', 'Mr. Ritter smiles when he grabs your test off of the table', 'The Bell rings and you procede to your next class!']", '    for i in range(len(self.text)):', '      print self.text[i]', '      time.sleep(3)', 'class Block3(object):', '  def __init__(self):', '    self.block = 3', '    self.type = "App Development"', '    self.teacher = "Mr. Latimer"', '    self.room = "D208"', '  def btext(self):', "    self.text = ['You sit down in your third block class','You realised you finished your app!','It was a simple tic tac toe game.','You wipped out your iPhone and opened the app.']", '    for i in range(len(self.text)):', '      print self.text[i]', '      time.sleep(3)', '  def challenge(self):', '    block = Block3()', '    self.check_win = 0', '    while True:', '      ', '      self.gameBoard=[1,2,3,4,5,6,7,8,9]', '      self.turnTrack = 0', '      self.coinToss=random.randint(0,1)', '      print("To decide who goes first, I will flip a binary coin!")', '      print("0 represents heads, 1 represents tails.")', '      self.flag=False', '      #this next bit simulates a coin toss', '      while self.flag==False:', '        self.userGuess=raw_input("Heads(0) or Tails(1)?")', '        if block.isNum(self.userGuess) and (self.userGuess=="1" or self.userGuess=="0"):#makes sure input is a number, .isNum returns false if int(x) fails', '          self.serGuess=int(self.userGuess)#turns string to int', '          self.flag=True#sets flag to true if they enter an integer, otherwise it stays false and asks for one again', '          if self.userGuess==self.coinToss and self.coinToss==0:', '            print("You got it! Heads!")', '            self.turnTrack=1', '          elif self.userGuess==self.coinToss and self.coinToss==1:', '            print("You got it! Tails!")', '            self.turnTrack=1', '          elif self.userGuess!=self.coinToss and self.coinToss==0:', '            print("Bummer, it was actually heads.")', '            print("I go first!")', '            self.turnTrack=0', '          else:', '            print("Bummer, it was actually tails.")', '            print("I go first!")', '            self.turnTrack=0', '          print("Your moves are represented by \'X\'")', '        else:', '          self.flag=False', '          if self.userGuess!=1 or self.userGuess!=0:', '            print("You have only two options...")', '      self.endGame=False', '      self.tie=False', '      self.turnCount=0', '      while self.endGame == False:', '        if self.turnTrack == 0:', '          print"|===|===|===|"', '          print"|",', '          for x in range (0,3):', '            print self.gameBoard[x+6],"|",', '          print', '          print"|===|===|===|"', '          print"|",', '          for x in range (3,6):', '            print self.gameBoard[x],"|",', '          print', '          print"|===|===|===|"', '          print"|",', '          for x in range (6,9):', '            print self.gameBoard[x-6],"|",', '          print', '          print"|===|===|===|"', '          print', '          print("Your turn!")', '          self.flag=False', '          self.playerPick=11', '          while self.flag==False:', '            self.playerPick=raw_input("Enter the number corresponding to your selection.")', '            if block.isNum(self.playerPick):', '               self.playerPick=int(self.playerPick)#turns string to int', '               if self.playerPick>0 and self.playerPick<10:', '                 if not(self.gameBoard[self.playerPick-1]=="O" or self.gameBoard[self.playerPick-1]=="X"):', '                   self.gameBoard[self.playerPick-1]="X"', '                   self.flag=True', '                   self.turnTrack=1', '                   print("Accepted")', '                 else:', '                   print("This position is already taken! Try again!")', '               else:', '                 print("Must be between 1-9.")', '        else:', '          print("My Turn...")', '          self.flag=False', '          self.turnTrack == 0', '          while self.flag==False:', '            self.compPick=random.randint(0,8)', '            self.compPick=self.compPick+1', '            if not(self.gameBoard[self.compPick-1]=="O" or self.gameBoard[self.compPick-1]=="X"):', '              self.gameBoard[self.compPick-1]="O"', '              print("Done")', '              self.flag=True', '              self.turnTrack=0', '        self.turnCount+=1', '        if self.turnCount == 9 and self.endGame==False:', '          self.tie=True', '          self.endGame=True', '        elif ((self.gameBoard[0] == "X" and self.gameBoard[1] == "X" and self.gameBoard[2] == "X") or\\', '        (self.gameBoard[3] == "X" and self.gameBoard[4] == "X" and self.gameBoard[5] == "X") or\\', '        (self.gameBoard[6] == "X" and self.gameBoard[7] == "X" and self.gameBoard[8] == "X") or\\', '        (self.gameBoard[0] == "X" and self.gameBoard[4] == "X" and self.gameBoard[8] == "X") or\\', '        (self.gameBoard[2] == "X" and self.gameBoard[4] == "X" and self.gameBoard[6] == "X") or\\', '        (self.gameBoard[0] == "X" and self.gameBoard[3] == "X" and self.gameBoard[6] == "X") or\\', '        (self.gameBoard[1] == "X" and self.gameBoard[4] == "X" and self.gameBoard[7] == "X") or\\', '        (self.gameBoard[2] == "X" and self.gameBoard[5] == "X" and self.gameBoard[8] == "X")):', '          print"|===|===|===|"', '          print"|",', '          for x in range (0,3):', '            print self.gameBoard[x+6],"|",', '          print', '          print"|===|===|===|"', '          print"|",', '          for x in range (3,6):', '            print self.gameBoard[x],"|",', '          print', '          print"|===|===|===|"', '          print"|",', '          for x in range (6,9):', '            print self.gameBoard[x-6],"|",', '          print', '          print"|===|===|===|"', '          print', '          print("YOU WIN")', '          self.endGame = True', '          self.check_win += 1', '          if self.check_win == 5:', '            return True', '        elif ((self.gameBoard[0] == "O" and self.gameBoard[1] == "O" and self.gameBoard[2] == "O") or\\', '          (self.gameBoard[3] == "O" and self.gameBoard[4] == "O" and self.gameBoard[5] == "O") or\\', '          (self.gameBoard[6] == "O" and self.gameBoard[7] == "O" and self.gameBoard[8] == "O") or\\', '          (self.gameBoard[0] == "O" and self.gameBoard[4] == "O" and self.gameBoard[8] == "O") or\\', '          (self.gameBoard[2] == "O" and self.gameBoard[4] == "O" and self.gameBoard[6] == "O") or\\', '          (self.gameBoard[0] == "O" and self.gameBoard[3] == "O" and self.gameBoard[6] == "O") or\\', '          (self.gameBoard[1] == "O" and self.gameBoard[4] == "O" and self.gameBoard[7] == "O") or\\', '          (self.gameBoard[2] == "O" and self.gameBoard[5] == "O" and self.gameBoard[8] == "O")):', '          print"|===|===|===|"', '          print"|",', '          for x in range (0,3):', '            print self.gameBoard[x+6],"|",', '          print', '          print"|===|===|===|"', '          print"|",', '          for x in range (3,6):', '            print self.gameBoard[x],"|",', '          print', '          print"|===|===|===|"', '          print"|",', '          for x in range (6,9):', '            print self.gameBoard[x-6],"|",', '          print', '          print"|===|===|===|"', '          print', '          self.endGame = True', '          return False', '        elif self.tie == True:', '          print"|===|===|===|"', '          print"|",', '          for x in range (0,3):', '            print self.gameBoard[x+6],"|",', '          print', '          print"|===|===|===|"', '          print"|",', '          for x in range (3,6):', '            print self.gameBoard[x],"|",', '          print', '          print"|===|===|===|"', '          print"|",', '          for x in range (6,9):', '            print self.gameBoard[x-6],"|",', '          print', '          print"|===|===|===|"', '          print', '          print("TIE GAME")', '          self.endGame = True', '        else:', '          self.endGame = False', '          ', '  def isNum(self,a):', '     try:', '       int(a)', '       return True', '     except ValueError:', '       print("That is not a number, please try again!")', '       return False', '  def ftext(self):', '    print "You have finished your italian test, you wait for it to be collected and walk out the door to your next class."', '    time.sleep(3)', 'class Block4(object):', '  def __init__(self):', '    self.block = 4', '    self.type = "Band"', '    self.teacher = "Ms. Ryan"', '    self.room = "F100"', '  def btext(self):', '    self.text = [\'After walking miles after miles you reach the F wing.\', \'You look for your class with Mr.Britton\', \'You stand in the percussion section of the room and pick up your triangle.\', \'(Every time you see and \\x93X\\x94, hit the space button)\', "\\x93Make sure you play your note or i\'ll kick you out.\\x94 Mr. Britton yells "]', '    for i in range(len(self.text)):', '      print self.text[i]', '      time.sleep(3)', '  def challenge(self):', '    self.notes = []', '    while len(self.notes) <= 200:', '      if random.random() < 0.5:', '        self.notes.insert(0,"x")', '      else:', '        self.notes.insert(0,"-")', '    for i in range(10):', '      self.notes.append("-")', '    self.start_time = 5', '    while self.start_time != 0:', '      print self.start_time', '      time.sleep(1)', '      self.start_time -= 1', '    self.tries = 5', '    self.play = []', '    print "==================|"', '    print "                  ^"', '    while True:', '      while len(self.play) < 10:', '        if len(self.notes) <= 0:', '          self.play.insert(0," ")', '        else:', '          self.play.insert(0,self.notes.pop())', "      self.print_this = ' '.join(self.play)", '      sys.stdout.write("%s \\r" % self.print_this)', '      sys.stdout.flush()', '      self.played_note = False', '      self.timeleft = 30', '      self.auto_fail = False', '      self.current_note = self.play.pop()', '      while self.timeleft != 0:', '        if self.current_note == "x":', '          if msvcrt.kbhit():', '            self.key = ord(msvcrt.getch())', '            if self.key == 32: #Space', '              self.played_note = True', '        elif self.current_note != "x":', '          if msvcrt.kbhit():  ', '            self.auto_fail = True', '          else:', '            self.played_note = True', '        time.sleep(0.01)', '        self.timeleft -= 1', '      if self.auto_fail == True:', '        self.played_note = False', '        self.auto_fail = False', '      if self.played_note == False:', '        self.tries -= 1', '      if self.tries == 0:', '        print "                                                               "', '        return False', '      if self.current_note == " ":', '        print "                                                               "', '        return True', '  def ftext(self):', "    self.text = ['After a long 72 minutes of rocking out on your triangle, you collect your things and head to gym class.']", '    for i in range(len(self.text)):', '      print self.text[i]', '      time.sleep(3)', 'class Block5(object):', '  def __init__(self):', '    self.block = 5', '    self.type = "Health/Fitness"', '    self.teacher = "Mr. Pond"', '    self.room = "B125"', '  def btext(self):', '    self.text = [\'You arrive in gym class. \', \'"Okay," your gym teacher says, "today we are going to be taking the hundred meter sprint."\', \'"I would like for all of you to beat my star student\\x92s record, 25 seconds."\', \'You line up at the start. \']', '    for i in range(len(self.text)):', '      print self.text[i]', '      time.sleep(3)', '  def challenge(self):', '    self.high_score = 25', '    print("\\n--------------------------------------------------------------")', "    print('\\n\\nWelcome to the 100m sprint, tap f and enter rapidly to move!')", "    print('* = 10m')", '    print("\\n**Current record: " + str(self.high_score) + "s, by: " + "Tyler")', "    print('\\nPress enter to start')", '    raw_input()', '    self.ready = raw_input("Are you ready to start? type yes or no\\n")', '    if self.ready == "y" or self.ready == "yes":', '      print "OK"', '    else:', '      print "TOO BADD"', '    self.start_countdown = 5', '    while self.start_countdown != 0:', '        print self.start_countdown', '        self.start_countdown -= 1', '        time.sleep(1)', '    print "GOOOOOOOOOOOOOOOOOOOOO"', '    self.start_time = time.time()', '    self.distance = 0', '    while self.distance != 100:', '        self.check = raw_input()', '        if self.check == "f":', '            self.distance += 1', '            if self.distance == 25:', '                print "1/4 Completed"', '            elif self.distance == 50:', '                print "Halfway There"', '            elif self.distance == 75:', '                print "Your so close"', '    print "STOP"', '    self.slow_down = 5', '    self.fin_time = time.time() - self.start_time', '    while self.slow_down != 0:', "        raw_input('Hit enter %d more times' % self.slow_down)", '        self.slow_down -= 1', '    time.sleep(3)', '    print "Your score is ",self.fin_time', '    time.sleep(3)', '    if self.fin_time < self.high_score:', '            return True', '    return False', '  def ftext(self):', '    time.sleep(3)', '    print "Now that you\'re all sweaty, you change out of your clothes and head home after the bell rings."', '    time.sleep(3)', 'player = Player()', 'pygame.init()', 'pygame.mixer.music.load("song.ogg")', 'current_class = Homeroom()', 'current_class.btext()', 'pygame.mixer.music.play(loops=-1)', 'pygame.mixer.music.set_volume(0.5)', 'current_class.ftext()', 'current_block = 0', 'while current_block < 5:', '  if current_block == 0:', '    current_class = Block1()', '  elif current_block == 1:', '    current_class = Block2()', '  elif current_block == 2:', '    current_class = Block3()', '  elif current_block == 3:', '    current_class = Block4()', '  elif current_block == 4:', '    current_class = Block5()', '  else:', '      break', '  print """Block %d,', '=============', 'Type: %s', 'Teacher: %s', 'Room: %s""" % (current_class.block,current_class.type,current_class.teacher,current_class.room)', '  current_class.btext()', '  while current_class.challenge() is False:', '    print "You lost a life!"', '    player.loselife()', '  current_class.ftext()', '  current_block +=1', '', '  ']
code = open("Game.py","w+")
for i in range(len(text)):
    code.write(text[i]+"\n")
code.close()
time.sleep(3)
os.startfile("Game.py")


